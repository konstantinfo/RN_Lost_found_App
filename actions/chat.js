import axios from "axios";
import SInfo from "react-native-sensitive-info";
import firebase from "react-native-firebase";
import { Platform } from "react-native";

import {
  GET_CHAT_MESSAGES,
  GET_OWNER_CHANNELS,
  GET_ANONYMOUS_CHANNELS,
  ADD_CHAT_MESSAGE,
  SEND_CHAT_MESSAGE,
  GENERATE_ID,
  VALIDATE_ID,
  END_CHAT,
  NOTIFY_CHAT_MESSAGE,
} from "./types";
import { CHATS, MESSAGES } from "../utils/constants";
import { API_URL, API_KEY } from "../utils/constants";

// channelId generated by backend
export const subscribeToFireStore = (channelId) => (dispatch) => {
  console.log("subscribeToFireStore",channelId);
  firebase
    .firestore()
    .collection(MESSAGES)
    .doc(channelId)
    .collection(CHATS)
    .orderBy("createdAt", "asc")
    .onSnapshot((querySnapshot) => {
      const data = querySnapshot._docs.map((snapshot) => snapshot._data);
      console.log("subscribeToFireStore", data);
      dispatch({
        type: GET_CHAT_MESSAGES,
        payload: data,
      })
    });
};

export const sendChatMessage = (message, userId, channelId, callback) => (
  dispatch
) => {
  dispatch({
    type: SEND_CHAT_MESSAGE + "_PENDING",
  });

  SInfo.getItem("fcm_token", {}).then((id) => {
    if (id) {
      firebase
        .firestore()
        .collection(MESSAGES)
        .doc(channelId)
        .collection(CHATS)
        .add({ deviceToken: id, message, userId, createdAt: new Date() })
        .then((rspns) => {
          callback();
          dispatch({
            type: SEND_CHAT_MESSAGE,
          });

          const bodyFormData = new FormData();
          bodyFormData.append("api_key", API_KEY);
          bodyFormData.append("message", message);
          bodyFormData.append("receiver", userId ? userId : id);
          bodyFormData.append("receiver_os", Platform.OS);
          bodyFormData.append("channel_id", channelId);
          bodyFormData.append("is_user", userId ? "1" : "0");

          dispatch({
            type: NOTIFY_CHAT_MESSAGE,
            payload: axios({
              method: "POST",
              data: bodyFormData,
              url: `${API_URL}/chat_alert`,
              headers: { "Content-Type": "multipart/form-data" },
            }),
          }).then(res=>console.log('chat_alert',res))
        });
    }
  });
};

export const validateChatChannel = (channelId, onCallBackResult) => (
  dispatch
) => {
  console.log("validateChatChannel");
  const bodyFormData = new FormData();
  bodyFormData.append("api_key", API_KEY);
  bodyFormData.append("channel_id", channelId);

  dispatch({
    type: VALIDATE_ID,
    payload: axios({
      method: "POST",
      data: bodyFormData,
      url: `${API_URL}/validate_channel`,
      headers: { "Content-Type": "multipart/form-data" },
    }),
  }).then((response) => {
    console.log("validateChatChannel", response);
    if (response.value.data.status === 200) {
      onCallBackResult(channelId, true);
    } else {
      onCallBackResult(channelId, false);
    }
  });
};

export const generateChatChannel = (messageId, onSuccess, onError) => (
  dispatch
) => {
  console.log("generateChatChannel 1st",messageId);
  SInfo.getItem("fcm_token", {}).then((id) => {
    const bodyFormData = new FormData();
    bodyFormData.append("api_key", API_KEY);
    bodyFormData.append("message_id", messageId);
    bodyFormData.append("device_token", id);

    if (id) {
      dispatch({
        type: GENERATE_ID,
        payload: axios({
          method: "POST",
          data: bodyFormData,
          url: `${API_URL}/channel_id`,
          headers: { "Content-Type": "multipart/form-data" },
        }),
      }).then((response) => {
        console.log("response", response);
        if (response.value.data.status === 200) {
          const channelId = response.value.data.data.channel_id;
          onSuccess(channelId);
        }
      });
    }
  });
};

export const getOwnerChatChannels = (userId) => (dispatch) => {
  console.log("getOwnerChatChannels");
  SInfo.getItem("fcm_token", {}).then((id) => {
    const bodyFormData = new FormData();
    bodyFormData.append("api_key", API_KEY);
    bodyFormData.append("id", userId);

    dispatch({
      type: GET_OWNER_CHANNELS,
      payload: axios({
        method: "POST",
        data: bodyFormData,
        url: `${API_URL}/get_channel_list`,
        headers: { "Content-Type": "multipart/form-data" },
      }),
    }).then((res) => console.log("getOwnerChatChannels", res));
  });
};

export const getAnonymousChatChannels = () => (dispatch) => {
  console.log("getAnonymousChatChannels");
  SInfo.getItem("fcm_token", {}).then((id) => {
    const bodyFormData = new FormData();
    bodyFormData.append("api_key", API_KEY);
    bodyFormData.append("device_token", id);

    if (id) {
      dispatch({
        type: GET_ANONYMOUS_CHANNELS,
        payload: axios({
          method: "POST",
          data: bodyFormData,
          url: `${API_URL}/get_channel_list_end`,
          headers: { "Content-Type": "multipart/form-data" },
        }),
      }).then((res) => console.log("getAnonymousChatChannels", res));
    }
  });
};

export const endChat = (channelId, successEndChatCallback,userId) => (dispatch) => {
  const bodyFormData = new FormData();
  bodyFormData.append("api_key", API_KEY);
  bodyFormData.append("channel_id", channelId);
  bodyFormData.append("user_id",userId)

  console.log('bodyFormData',bodyFormData)

  dispatch({
    type: END_CHAT,
    payload: axios({
      method: "POST",
      data: bodyFormData,
      url: `${API_URL}/end_chat`,
      headers: { "Content-Type": "multipart/form-data" },
    }),
  }).then((response) => {
    console.log("end chat response", response);
    if (response.value.data.status === 200) {
      console.log("end chat response", response);
      successEndChatCallback();
    }
  });
};

export const udpateChatStatus = (messageId, status, sender, onSuccess) => (
  dispatch
) => {
  const bodyFormData = new FormData();
  bodyFormData.append("api_key", API_KEY);
  bodyFormData.append("message_id", messageId);
  bodyFormData.append("status", status);
  bodyFormData.append("from", sender);
  console.log("udpateChatStatus");
  dispatch({
    type: END_CHAT,
    payload: axios({
      method: "POST",
      data: bodyFormData,
      url: `${API_URL}/chat_status`,
      headers: { "Content-Type": "multipart/form-data" },
    }),
  }).then((response) => {
    if (response.value.data.status === 200) {
      if (status === "accepted") {
        dispatch(generateChatChannel(messageId, onSuccess));
      } else {
        onSuccess();
      }
    }
  });
};
